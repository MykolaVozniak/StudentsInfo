@page "/students"
@using StudentsInfo.Controllers
@using StudentsInfo.Models
@using ModelsGroup = StudentsInfo.Models.Group;

<PageTitle>Студенти</PageTitle>

<h1>Студенти</h1>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@students" TItem="Student" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Student" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="Student" Property="LastName" Title="Прізвище" />
        <RadzenDataGridColumn TItem="Student" Property="FirstName" Title="Ім'я" />
        <RadzenDataGridColumn TItem="Student" Title="Група" >
            <Template Context="student">
                @GetGroupName(student.GroupId)
            </Template>
            </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Student" Property="AverageScore" Title="Середній бал" />
        <RadzenDataGridColumn TItem="Student" Property="RegistrationDate" Title="Дата реєстрації" />
        <RadzenDataGridColumn TItem="Student" Title="Дії" Sortable="false" Filterable="false">
            <Template Context="student">
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Click="() => ShowModalEdit(student.Id)"><span class="oi oi-pencil" aria-hidden="true"></span></RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="@(async () => await DeleteStudent(student.Id))"><span class="oi oi-x" aria-hidden="true"></span></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<div class="container d-flex justify-content-center my-3">
    <button class="btn btn-success w-25" @onclick="ShowModalCreate">Додати студента</button>
</div>

<!-- Modal Create -->
@if (showModalCreate)
{
    <div class="modal fade show d-block bg-white bg-opacity-50">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title ms-2">Додати студента</h2>
                    <button type="button" class="btn-close" @onclick="HideModalCreate"></button>
                </div>
                <div class="modal-body">
                    <RadzenTemplateForm TItem="StudentModel" Data="@studentModel" Submit="@AddStudent">
                        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                            <RadzenColumn SizeSM="6" SizeMD="10">
                                <RadzenStack>

                                    <RadzenFormField Text="Прізвище" Variant="@variant">
                                        <RadzenTextBox @bind-Value="@studentModel.LastName" Name="LastName" />
                                        <RadzenRequiredValidator Component="LastName" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Ім'я" Variant="@variant">
                                        <RadzenTextBox @bind-Value="@studentModel.FirstName" Name="FirstName" />
                                        <RadzenRequiredValidator Component="FirstName" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Середній бал" Variant="@variant">
                                        <RadzenNumeric @bind-Value="@studentModel.AverageScore" Name="AverageScore" />
                                        <RadzenRequiredValidator Component="AverageScore" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Група" Variant="@variant">
                                        <RadzenDropDownDataGrid @bind-Value=@studentModel.GroupId Data=@groups TextProperty="Name" ValueProperty="Id" Name="DropDownDataGridBindValue" />
                                        <RadzenRequiredValidator Component="DropDownDataGridBindValue" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        <div class="modal-footer mt-4">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Відмінити" Variant="Variant.Flat" Click="HideModalCreate" />
                            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Зберегти" Variant="Variant.Flat" />
                        </div>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
}


<!-- Modal Edit -->
@if (showModalEdit)
{
    <div class="modal fade show d-block bg-white bg-opacity-50">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title ms-2">Редагувати дані студента</h2>
                    <button type="button" class="btn-close" @onclick="HideModalEdit"></button>
                </div>
                <div class="modal-body">
                    <RadzenTemplateForm TItem="StudentModel" Data="@studentModel" Submit="@EditStudent">
                        <RadzenRow Gap="1rem" JustifyContent="JustifyContent.Center">
                            <RadzenColumn SizeSM="6" SizeMD="10">
                                <RadzenStack>

                                    <RadzenFormField Text="Прізвище" Variant="@variant">
                                        <RadzenTextBox @bind-Value="@studentModel.LastName" Name="LastName" />
                                        <RadzenRequiredValidator Component="LastName" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Ім'я" Variant="@variant">
                                        <RadzenTextBox @bind-Value="@studentModel.FirstName" Name="FirstName" />
                                        <RadzenRequiredValidator Component="FirstName" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Середній бал" Variant="@variant">
                                        <RadzenNumeric @bind-Value="@studentModel.AverageScore" Name="AverageScore" />
                                        <RadzenRequiredValidator Component="AverageScore" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Група" Variant="@variant">
                                        <RadzenDropDownDataGrid @bind-Value=@studentModel.GroupId Data=@groups TextProperty="Name" ValueProperty="Id" Name="DropDownDataGridBindValue" />
                                        <RadzenRequiredValidator Component="DropDownDataGridBindValue" Text="Обов'язкове поле!" />
                                    </RadzenFormField>

                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        <div class="modal-footer mt-4">
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Відмінити" Variant="Variant.Flat" Click="HideModalEdit" />
                            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Зберегти" Variant="Variant.Flat" />
                        </div>
                    </RadzenTemplateForm>
                </div>
            </div>
        </div>
    </div>
}

@code{
    private class StudentModel
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime RegistrationDate { get; set; }
        public double? AverageScore { get; set; }
        public int? GroupId { get; set; }
    }

    private StudentModel studentModel = new StudentModel();
    private List<ModelsGroup> groups;
    private List<Student> students;

    //Data
    private string GetGroupName(int? GroupId)
    {
        var groupsController = new GroupsController();
        int groupIdValue = GroupId.GetValueOrDefault();
        if (groupIdValue is 0)
        {
            return "";
        }
        var result = groupsController.ReadGroup(groupIdValue);
        return result.Name;
    }


    private void RefreshTable()
    {
        var studentsController = new StudentsController();
        students = studentsController.ReadStudents().ToList();

        var groupsController = new GroupsController();
        groups = groupsController.ReadGroups().ToList();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        RefreshTable();
    }

    //Delete
    private async Task DeleteStudent(int id)
    {
        var studentsController = new StudentsController();
        studentsController.DeleteStudent(id);
        RefreshTable();
    }

    //Modal Create
    private bool showModalCreate = false;
    Variant variant = Variant.Outlined;

    private void ShowModalCreate()
    {
        studentModel = new StudentModel();
        showModalCreate = true;
    }

    private void HideModalCreate()
    {
        showModalCreate = false;
        studentModel = new StudentModel();
    }

    //Func Create
    private void AddStudent()
    {
        var studentsController = new StudentsController();
        studentsController.CreateStudent(
            new Student
                {
                    FirstName = studentModel.FirstName,
                    LastName = studentModel.LastName,
                    AverageScore = studentModel.AverageScore,
                    GroupId = studentModel.GroupId,
                    RegistrationDate = DateTime.Now,
                }
        );
        RefreshTable();
        HideModalCreate();
    }

    //Modal Edit
    private bool showModalEdit = false;

    private void ShowModalEdit(int id)
    {
        var studentsController = new StudentsController();
        var result = studentsController.ReadStudent(id);
        studentModel = new StudentModel()
            {
                Id = result.Id,
                FirstName = result.FirstName,
                LastName = result.LastName,
                AverageScore = result.AverageScore,
                GroupId = result.GroupId,
                RegistrationDate = result.RegistrationDate
            };
        showModalEdit = true;
    }

    private void HideModalEdit()
    {
        showModalEdit = false;
        studentModel = new StudentModel();
    }

    //Func Student
    private async Task EditStudent()
    {
        var studentsController = new StudentsController();
        var result = studentsController.UpdateStudent(new Student
            {
                Id = studentModel.Id,
                FirstName = studentModel.FirstName,
                LastName = studentModel.LastName,
                AverageScore = studentModel.AverageScore,
                GroupId = studentModel.GroupId,
                RegistrationDate = studentModel.RegistrationDate
            });

        RefreshTable();
        HideModalEdit();
    }

}